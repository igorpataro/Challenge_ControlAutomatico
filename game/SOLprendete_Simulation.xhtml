<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>SOLprendete</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SOLprendete(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var q; // EjsS Model.Variables.VariablesTable.q
  var t; // EjsS Model.Variables.VariablesTable.t
  var dt; // EjsS Model.Variables.VariablesTable.dt
  var T; // EjsS Model.Variables.VariablesTable.T
  var beta; // EjsS Model.Variables.VariablesTable.beta
  var rho; // EjsS Model.Variables.VariablesTable.rho
  var Cp; // EjsS Model.Variables.VariablesTable.Cp
  var A; // EjsS Model.Variables.VariablesTable.A
  var L; // EjsS Model.Variables.VariablesTable.L
  var H; // EjsS Model.Variables.VariablesTable.H
  var Tin; // EjsS Model.Variables.VariablesTable.Tin
  var Ta; // EjsS Model.Variables.VariablesTable.Ta
  var I; // EjsS Model.Variables.VariablesTable.I
  var Color; // EjsS Model.Variables.VariablesTable.Color
  var Ref_pos; // EjsS Model.Variables.VariablesTable.Ref_pos
  var Cold_en; // EjsS Model.Variables.VariablesTable.Cold_en
  var Good_en; // EjsS Model.Variables.VariablesTable.Good_en
  var Hot_en; // EjsS Model.Variables.VariablesTable.Hot_en
  var Cloud_en; // EjsS Model.Variables.VariablesTable.Cloud_en
  var Cloud_op; // EjsS Model.Variables.VariablesTable.Cloud_op
  var factor; // EjsS Model.Variables.VariablesTable.factor
  var Manuel_en; // EjsS Model.Variables.VariablesTable.Manuel_en
  var q_ss; // EjsS Model.Variables.VariablesTable.q_ss
  var error; // EjsS Model.Variables.VariablesTable.error
  var Int_er; // EjsS Model.Variables.VariablesTable.Int_er
  var Kp; // EjsS Model.Variables.VariablesTable.Kp
  var Ki; // EjsS Model.Variables.VariablesTable.Ki
  var Auto; // EjsS Model.Variables.VariablesTable.Auto
  var L_indicator; // EjsS Model.Variables.VariablesTable.L_indicator
  var Sizey_good; // EjsS Model.Variables.VariablesTable.Sizey_good
  var Sizey_hot; // EjsS Model.Variables.VariablesTable.Sizey_hot
  var Pos_max; // EjsS Model.Variables.VariablesTable.Pos_max
  var Pos_min; // EjsS Model.Variables.VariablesTable.Pos_min
  var Tmax; // EjsS Model.Variables.VariablesTable.Tmax
  var Tmin; // EjsS Model.Variables.VariablesTable.Tmin
  var L_max; // EjsS Model.Variables.VariablesTable.L_max
  var L_min; // EjsS Model.Variables.VariablesTable.L_min
  var Delta_T; // EjsS Model.Variables.VariablesTable.Delta_T
  var Auto_Mode; // EjsS Model.Variables.VariablesTable.Auto_Mode
  var I_max; // EjsS Model.Variables.VariablesTable.I_max
  var I_min; // EjsS Model.Variables.VariablesTable.I_min
  var Size_arrow_min; // EjsS Model.Variables.VariablesTable.Size_arrow_min
  var Size_arrow_max; // EjsS Model.Variables.VariablesTable.Size_arrow_max
  var Player_name; // EjsS Model.Variables.VariablesTable.Player_name
  var Score; // EjsS Model.Variables.VariablesTable.Score
  var Player_data; // EjsS Model.Variables.VariablesTable.Player_data
  var Final_txt; // EjsS Model.Variables.VariablesTable.Final_txt
  var Final_txt_en; // EjsS Model.Variables.VariablesTable.Final_txt_en
  var Score_max; // EjsS Model.Variables.VariablesTable.Score_max
  var t_max; // EjsS Model.Variables.VariablesTable.t_max
  var Reward; // EjsS Model.Variables.VariablesTable.Reward
  var Score_line_max; // EjsS Model.Variables.VariablesTable.Score_line_max
  var Score_line_min; // EjsS Model.Variables.VariablesTable.Score_line_min
  var Player_pos; // EjsS Model.Variables.VariablesTable.Player_pos
  var Score_rob; // EjsS Model.Variables.VariablesTable.Score_rob

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      q : q,
      t : t,
      dt : dt,
      T : T,
      beta : beta,
      rho : rho,
      Cp : Cp,
      A : A,
      L : L,
      H : H,
      Tin : Tin,
      Ta : Ta,
      I : I,
      Color : Color,
      Ref_pos : Ref_pos,
      Cold_en : Cold_en,
      Good_en : Good_en,
      Hot_en : Hot_en,
      Cloud_en : Cloud_en,
      Cloud_op : Cloud_op,
      factor : factor,
      Manuel_en : Manuel_en,
      q_ss : q_ss,
      error : error,
      Int_er : Int_er,
      Kp : Kp,
      Ki : Ki,
      Auto : Auto,
      L_indicator : L_indicator,
      Sizey_good : Sizey_good,
      Sizey_hot : Sizey_hot,
      Pos_max : Pos_max,
      Pos_min : Pos_min,
      Tmax : Tmax,
      Tmin : Tmin,
      L_max : L_max,
      L_min : L_min,
      Delta_T : Delta_T,
      Auto_Mode : Auto_Mode,
      I_max : I_max,
      I_min : I_min,
      Size_arrow_min : Size_arrow_min,
      Size_arrow_max : Size_arrow_max,
      Player_name : Player_name,
      Score : Score,
      Player_data : Player_data,
      Final_txt : Final_txt,
      Final_txt_en : Final_txt_en,
      Score_max : Score_max,
      t_max : t_max,
      Reward : Reward,
      Score_line_max : Score_line_max,
      Score_line_min : Score_line_min,
      Player_pos : Player_pos,
      Score_rob : Score_rob
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      q : q,
      t : t,
      dt : dt,
      T : T,
      beta : beta,
      rho : rho,
      Cp : Cp,
      A : A,
      L : L,
      H : H,
      Tin : Tin,
      Ta : Ta,
      I : I,
      Color : Color,
      Ref_pos : Ref_pos,
      Cold_en : Cold_en,
      Good_en : Good_en,
      Hot_en : Hot_en,
      Cloud_en : Cloud_en,
      Cloud_op : Cloud_op,
      factor : factor,
      Manuel_en : Manuel_en,
      q_ss : q_ss,
      error : error,
      Int_er : Int_er,
      Kp : Kp,
      Ki : Ki,
      Auto : Auto,
      L_indicator : L_indicator,
      Sizey_good : Sizey_good,
      Sizey_hot : Sizey_hot,
      Pos_max : Pos_max,
      Pos_min : Pos_min,
      Tmax : Tmax,
      Tmin : Tmin,
      L_max : L_max,
      L_min : L_min,
      Delta_T : Delta_T,
      Auto_Mode : Auto_Mode,
      I_max : I_max,
      I_min : I_min,
      Size_arrow_min : Size_arrow_min,
      Size_arrow_max : Size_arrow_max,
      Player_name : Player_name,
      Score : Score,
      Player_data : Player_data,
      Final_txt : Final_txt,
      Final_txt_en : Final_txt_en,
      Score_max : Score_max,
      t_max : t_max,
      Reward : Reward,
      Score_line_max : Score_line_max,
      Score_line_min : Score_line_min,
      Player_pos : Player_pos,
      Score_rob : Score_rob
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.beta != "undefined") beta = json.beta;
    if(typeof json.rho != "undefined") rho = json.rho;
    if(typeof json.Cp != "undefined") Cp = json.Cp;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.H != "undefined") H = json.H;
    if(typeof json.Tin != "undefined") Tin = json.Tin;
    if(typeof json.Ta != "undefined") Ta = json.Ta;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.Color != "undefined") Color = json.Color;
    if(typeof json.Ref_pos != "undefined") Ref_pos = json.Ref_pos;
    if(typeof json.Cold_en != "undefined") Cold_en = json.Cold_en;
    if(typeof json.Good_en != "undefined") Good_en = json.Good_en;
    if(typeof json.Hot_en != "undefined") Hot_en = json.Hot_en;
    if(typeof json.Cloud_en != "undefined") Cloud_en = json.Cloud_en;
    if(typeof json.Cloud_op != "undefined") Cloud_op = json.Cloud_op;
    if(typeof json.factor != "undefined") factor = json.factor;
    if(typeof json.Manuel_en != "undefined") Manuel_en = json.Manuel_en;
    if(typeof json.q_ss != "undefined") q_ss = json.q_ss;
    if(typeof json.error != "undefined") error = json.error;
    if(typeof json.Int_er != "undefined") Int_er = json.Int_er;
    if(typeof json.Kp != "undefined") Kp = json.Kp;
    if(typeof json.Ki != "undefined") Ki = json.Ki;
    if(typeof json.Auto != "undefined") Auto = json.Auto;
    if(typeof json.L_indicator != "undefined") L_indicator = json.L_indicator;
    if(typeof json.Sizey_good != "undefined") Sizey_good = json.Sizey_good;
    if(typeof json.Sizey_hot != "undefined") Sizey_hot = json.Sizey_hot;
    if(typeof json.Pos_max != "undefined") Pos_max = json.Pos_max;
    if(typeof json.Pos_min != "undefined") Pos_min = json.Pos_min;
    if(typeof json.Tmax != "undefined") Tmax = json.Tmax;
    if(typeof json.Tmin != "undefined") Tmin = json.Tmin;
    if(typeof json.L_max != "undefined") L_max = json.L_max;
    if(typeof json.L_min != "undefined") L_min = json.L_min;
    if(typeof json.Delta_T != "undefined") Delta_T = json.Delta_T;
    if(typeof json.Auto_Mode != "undefined") Auto_Mode = json.Auto_Mode;
    if(typeof json.I_max != "undefined") I_max = json.I_max;
    if(typeof json.I_min != "undefined") I_min = json.I_min;
    if(typeof json.Size_arrow_min != "undefined") Size_arrow_min = json.Size_arrow_min;
    if(typeof json.Size_arrow_max != "undefined") Size_arrow_max = json.Size_arrow_max;
    if(typeof json.Player_name != "undefined") Player_name = json.Player_name;
    if(typeof json.Score != "undefined") Score = json.Score;
    if(typeof json.Player_data != "undefined") Player_data = json.Player_data;
    if(typeof json.Final_txt != "undefined") Final_txt = json.Final_txt;
    if(typeof json.Final_txt_en != "undefined") Final_txt_en = json.Final_txt_en;
    if(typeof json.Score_max != "undefined") Score_max = json.Score_max;
    if(typeof json.t_max != "undefined") t_max = json.t_max;
    if(typeof json.Reward != "undefined") Reward = json.Reward;
    if(typeof json.Score_line_max != "undefined") Score_line_max = json.Score_line_max;
    if(typeof json.Score_line_min != "undefined") Score_line_min = json.Score_line_min;
    if(typeof json.Player_pos != "undefined") Player_pos = json.Player_pos;
    if(typeof json.Score_rob != "undefined") Score_rob = json.Score_rob;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.beta != "undefined") beta = json.beta;
    if(typeof json.rho != "undefined") rho = json.rho;
    if(typeof json.Cp != "undefined") Cp = json.Cp;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.H != "undefined") H = json.H;
    if(typeof json.Tin != "undefined") Tin = json.Tin;
    if(typeof json.Ta != "undefined") Ta = json.Ta;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.Color != "undefined") Color = json.Color;
    if(typeof json.Ref_pos != "undefined") Ref_pos = json.Ref_pos;
    if(typeof json.Cold_en != "undefined") Cold_en = json.Cold_en;
    if(typeof json.Good_en != "undefined") Good_en = json.Good_en;
    if(typeof json.Hot_en != "undefined") Hot_en = json.Hot_en;
    if(typeof json.Cloud_en != "undefined") Cloud_en = json.Cloud_en;
    if(typeof json.Cloud_op != "undefined") Cloud_op = json.Cloud_op;
    if(typeof json.factor != "undefined") factor = json.factor;
    if(typeof json.Manuel_en != "undefined") Manuel_en = json.Manuel_en;
    if(typeof json.q_ss != "undefined") q_ss = json.q_ss;
    if(typeof json.error != "undefined") error = json.error;
    if(typeof json.Int_er != "undefined") Int_er = json.Int_er;
    if(typeof json.Kp != "undefined") Kp = json.Kp;
    if(typeof json.Ki != "undefined") Ki = json.Ki;
    if(typeof json.Auto != "undefined") Auto = json.Auto;
    if(typeof json.L_indicator != "undefined") L_indicator = json.L_indicator;
    if(typeof json.Sizey_good != "undefined") Sizey_good = json.Sizey_good;
    if(typeof json.Sizey_hot != "undefined") Sizey_hot = json.Sizey_hot;
    if(typeof json.Pos_max != "undefined") Pos_max = json.Pos_max;
    if(typeof json.Pos_min != "undefined") Pos_min = json.Pos_min;
    if(typeof json.Tmax != "undefined") Tmax = json.Tmax;
    if(typeof json.Tmin != "undefined") Tmin = json.Tmin;
    if(typeof json.L_max != "undefined") L_max = json.L_max;
    if(typeof json.L_min != "undefined") L_min = json.L_min;
    if(typeof json.Delta_T != "undefined") Delta_T = json.Delta_T;
    if(typeof json.Auto_Mode != "undefined") Auto_Mode = json.Auto_Mode;
    if(typeof json.I_max != "undefined") I_max = json.I_max;
    if(typeof json.I_min != "undefined") I_min = json.I_min;
    if(typeof json.Size_arrow_min != "undefined") Size_arrow_min = json.Size_arrow_min;
    if(typeof json.Size_arrow_max != "undefined") Size_arrow_max = json.Size_arrow_max;
    if(typeof json.Player_name != "undefined") Player_name = json.Player_name;
    if(typeof json.Score != "undefined") Score = json.Score;
    if(typeof json.Player_data != "undefined") Player_data = json.Player_data;
    if(typeof json.Final_txt != "undefined") Final_txt = json.Final_txt;
    if(typeof json.Final_txt_en != "undefined") Final_txt_en = json.Final_txt_en;
    if(typeof json.Score_max != "undefined") Score_max = json.Score_max;
    if(typeof json.t_max != "undefined") t_max = json.t_max;
    if(typeof json.Reward != "undefined") Reward = json.Reward;
    if(typeof json.Score_line_max != "undefined") Score_line_max = json.Score_line_max;
    if(typeof json.Score_line_min != "undefined") Score_line_min = json.Score_line_min;
    if(typeof json.Player_pos != "undefined") Player_pos = json.Player_pos;
    if(typeof json.Score_rob != "undefined") Score_rob = json.Score_rob;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Model"] = true;
    __pagesEnabled["Relations"] = true;
  });

  _model.addToReset(function() {
    q = 5; // EjsS Model.Variables.VariablesTable.q
    t = 0; // EjsS Model.Variables.VariablesTable.t
    dt = 0.05; // EjsS Model.Variables.VariablesTable.dt
    T = 50; // EjsS Model.Variables.VariablesTable.T
    beta = 5; // EjsS Model.Variables.VariablesTable.beta
    rho = 1000; // EjsS Model.Variables.VariablesTable.rho
    Cp = 4180; // EjsS Model.Variables.VariablesTable.Cp
    A = 0.0001131; // EjsS Model.Variables.VariablesTable.A
    L = 45; // EjsS Model.Variables.VariablesTable.L
    H = 30; // EjsS Model.Variables.VariablesTable.H
    Tin = 40; // EjsS Model.Variables.VariablesTable.Tin
    Ta = 20; // EjsS Model.Variables.VariablesTable.Ta
    I = 300; // EjsS Model.Variables.VariablesTable.I
    Ref_pos = -150; // EjsS Model.Variables.VariablesTable.Ref_pos
    Cold_en = true; // EjsS Model.Variables.VariablesTable.Cold_en
    Good_en = false; // EjsS Model.Variables.VariablesTable.Good_en
    Hot_en = false; // EjsS Model.Variables.VariablesTable.Hot_en
    Cloud_en = true; // EjsS Model.Variables.VariablesTable.Cloud_en
    factor = 1; // EjsS Model.Variables.VariablesTable.factor
    Manuel_en = false; // EjsS Model.Variables.VariablesTable.Manuel_en
    q_ss = 5; // EjsS Model.Variables.VariablesTable.q_ss
    error = 0; // EjsS Model.Variables.VariablesTable.error
    Int_er = 0; // EjsS Model.Variables.VariablesTable.Int_er
    Kp = -0.85; // EjsS Model.Variables.VariablesTable.Kp
    Ki = 0.2; // EjsS Model.Variables.VariablesTable.Ki
    Auto = false; // EjsS Model.Variables.VariablesTable.Auto
    Sizey_good = 80; // EjsS Model.Variables.VariablesTable.Sizey_good
    Pos_max = 0; // EjsS Model.Variables.VariablesTable.Pos_max
    Pos_min = -300; // EjsS Model.Variables.VariablesTable.Pos_min
    Tmax = 54; // EjsS Model.Variables.VariablesTable.Tmax
    Tmin = 48; // EjsS Model.Variables.VariablesTable.Tmin
    L_max = 350; // EjsS Model.Variables.VariablesTable.L_max
    L_min = 50; // EjsS Model.Variables.VariablesTable.L_min
    Delta_T = 0.4; // EjsS Model.Variables.VariablesTable.Delta_T
    Auto_Mode = false; // EjsS Model.Variables.VariablesTable.Auto_Mode
    I_max = 600; // EjsS Model.Variables.VariablesTable.I_max
    I_min = 300; // EjsS Model.Variables.VariablesTable.I_min
    Size_arrow_min = 170; // EjsS Model.Variables.VariablesTable.Size_arrow_min
    Size_arrow_max = 220; // EjsS Model.Variables.VariablesTable.Size_arrow_max
    Player_name = "Nombre"; // EjsS Model.Variables.VariablesTable.Player_name
    Score = 0; // EjsS Model.Variables.VariablesTable.Score
    Player_data = "correo"; // EjsS Model.Variables.VariablesTable.Player_data
    Final_txt = "¡Enhorabuena, has logrado 0.00 puntos! \n \n \n Pulse 'Reinicio' para jugar nuevamente."; // EjsS Model.Variables.VariablesTable.Final_txt
    Final_txt_en = false; // EjsS Model.Variables.VariablesTable.Final_txt_en
    t_max = 60; // EjsS Model.Variables.VariablesTable.t_max
    Reward = 0.01; // EjsS Model.Variables.VariablesTable.Reward
    Score_line_max = 90; // EjsS Model.Variables.VariablesTable.Score_line_max
    Score_line_min = -90; // EjsS Model.Variables.VariablesTable.Score_line_min
    Score_rob = 10.1; // EjsS Model.Variables.VariablesTable.Score_rob
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function steady(){  // > CustomCode.Functions:1
  q_ss = q;  // > CustomCode.Functions:2
  Int_er = 0;  // > CustomCode.Functions:3
  }  // > CustomCode.Functions:4
  function updateFile() {  // > CustomCode.Functions:5
              // Create an input element to allow file selection  // > CustomCode.Functions:6
              const inputElement = document.createElement('input');  // > CustomCode.Functions:7
              inputElement.type = 'file';  // > CustomCode.Functions:8
              inputElement.accept = '.txt';  // > CustomCode.Functions:9
              // Add an event listener to handle file selection  // > CustomCode.Functions:10
              inputElement.addEventListener('change', (event) => {  // > CustomCode.Functions:11
                  const file = event.target.files[0];  // > CustomCode.Functions:12
                  if (file) {  // > CustomCode.Functions:13
                      // Read the file content  // > CustomCode.Functions:14
                      const reader = new FileReader();  // > CustomCode.Functions:15
                      reader.onload = function(e) {  // > CustomCode.Functions:16
                          const content = e.target.result;  // > CustomCode.Functions:17
                          // > CustomCode.Functions:18
                          // Prepare new values  // > CustomCode.Functions:19
                          const updatedContent = content + Player_name + ';' + Math.round(Score*100)/100 + ";" + Player_data + '\n';  // > CustomCode.Functions:20
                          // Create a Blob with the updated content  // > CustomCode.Functions:21
                          const updatedFile = new Blob([updatedContent], { type: 'text/plain' });  // > CustomCode.Functions:22
                          // Create a link element to download the updated file  // > CustomCode.Functions:23
                          const downloadLink = document.createElement('a');  // > CustomCode.Functions:24
                          downloadLink.href = URL.createObjectURL(updatedFile);  // > CustomCode.Functions:25
                          downloadLink.download = 'Scores.txt'; // Use the same name  // > CustomCode.Functions:26
                          document.body.appendChild(downloadLink);  // > CustomCode.Functions:27
                          downloadLink.click();  // > CustomCode.Functions:28
                          document.body.removeChild(downloadLink);  // > CustomCode.Functions:29
                      };  // > CustomCode.Functions:30
                      reader.readAsText(file);  // > CustomCode.Functions:31
                  }  // > CustomCode.Functions:32
              });  // > CustomCode.Functions:33
              // Trigger the file input dialog  // > CustomCode.Functions:34
              inputElement.click();  // > CustomCode.Functions:35
          }  // > CustomCode.Functions:36

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Model"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Relations"]) return;
    /* Max score points */  // > FixedRelations.Relations:1
    Score_max = (t_max/dt)*Reward;  // > FixedRelations.Relations:2
    /* Sun position and Irradiance level */  // > FixedRelations.Relations:3
    I = -t*t*0.333+ 20*t + 300;  // > FixedRelations.Relations:4
    /* Compute opacity for the clouds and the irradiance discount factor */   // > FixedRelations.Relations:5
    if (t>= 25 && t<=35){  // > FixedRelations.Relations:6
      factor = 0.4;  // > FixedRelations.Relations:7
      if (t<25){  // > FixedRelations.Relations:8
      t=25;  // > FixedRelations.Relations:9
      }  // > FixedRelations.Relations:10
      if (t>35){  // > FixedRelations.Relations:11
      t=35;  // > FixedRelations.Relations:12
      }  // > FixedRelations.Relations:13
      Cloud_op = -t*t/25 + 12*t/5 - 35;   // > FixedRelations.Relations:14
        // > FixedRelations.Relations:15
      } else {  // > FixedRelations.Relations:16
      factor = 1;  // > FixedRelations.Relations:17
      Cloud_op = 0;   // > FixedRelations.Relations:18
      }  // > FixedRelations.Relations:19
    /* Convert temperature for a range from [0, 1] of the Maximum and minimum  */  // > FixedRelations.Relations:20
    T_aux = (T-Tmin)/(Tmax-Tmin);  // > FixedRelations.Relations:21
    /* Temperature levels indicator */   // > FixedRelations.Relations:22
    P_aux = ((Tmax - Tmin)/(Pos_max-Pos_min)) ;   // > FixedRelations.Relations:23
    /* L_indicator = 58.333*T - 2800; */  // > FixedRelations.Relations:24
    L_indicator = (L_max-L_min)*((T-Tmin)/(Tmax-Tmin)) + L_min;  // > FixedRelations.Relations:25
    if (L_indicator>L_max){  // > FixedRelations.Relations:26
      L_indicator=L_max;  // > FixedRelations.Relations:27
      }  // > FixedRelations.Relations:28
      if (L_indicator<L_min){  // > FixedRelations.Relations:29
      L_indicator=L_min;  // > FixedRelations.Relations:30
      }  // > FixedRelations.Relations:31
    /* Define color */  // > FixedRelations.Relations:32
    if (T_aux<0.35){  // > FixedRelations.Relations:33
      red = 0;  // > FixedRelations.Relations:34
      green = 255*(T_aux+0.3);  // > FixedRelations.Relations:35
      blue = 255;  // > FixedRelations.Relations:36
    }else if(T_aux>=0.35){  // > FixedRelations.Relations:37
      red = 255;  // > FixedRelations.Relations:38
      green = 145*(1-T_aux);  // > FixedRelations.Relations:39
      blue = 0;  // > FixedRelations.Relations:40
    }  // > FixedRelations.Relations:41
          // > FixedRelations.Relations:42
    Color = "rgb(" + red + "," + green + "," + blue + ")";  // > FixedRelations.Relations:43
    /* Stop the game */  // > FixedRelations.Relations:44
    if (t>t_max){  // > FixedRelations.Relations:45
    _pause()  // > FixedRelations.Relations:46
    /* Ende game msg */  // > FixedRelations.Relations:47
    Final_txt = "¡Enhorabuena, has logrado " + Math.round(Score*100)/100 + " puntos! \n \n \n Pulse 'Reinicio' para jugar nuevamente.";  // > FixedRelations.Relations:48
    Final_txt_en = true;  // > FixedRelations.Relations:49
    }   // > FixedRelations.Relations:50
    /* Define text for displaying temperature */  // > FixedRelations.Relations:51
    T_view = "T = " + Math.round(T*100)/100;  // > FixedRelations.Relations:52
    /* Define text for displaying temperature */   // > FixedRelations.Relations:53
    Timer_text = Math.round(t);  // > FixedRelations.Relations:54
    /* Define position for the Reference bar (Max pos = 0 T = 81C / Min pos = -300 T = 43 */  // > FixedRelations.Relations:55
    Ref = P_aux*(Ref_pos-Pos_min) + Tmin;  // > FixedRelations.Relations:56
    if (Ref_pos < Pos_min){  // > FixedRelations.Relations:57
      Ref_pos = Pos_min;  // > FixedRelations.Relations:58
    }   // > FixedRelations.Relations:59
    if (Ref_pos > Pos_max){  // > FixedRelations.Relations:60
      Ref_pos = Pos_max;  // > FixedRelations.Relations:61
    }  // > FixedRelations.Relations:62
    /* Define condition for enable cold face image */  // > FixedRelations.Relations:63
    Ref_range = (1/P_aux)*Delta_T;  // > FixedRelations.Relations:64
    if ((T-Ref) < -Delta_T){  // > FixedRelations.Relations:65
      Cold_en = true;  // > FixedRelations.Relations:66
    } else {  // > FixedRelations.Relations:67
      Cold_en = false;  // > FixedRelations.Relations:68
    }  // > FixedRelations.Relations:69
    /* Define condition for enable hot face image */  // > FixedRelations.Relations:70
    if ((T-Ref) > Delta_T){  // > FixedRelations.Relations:71
      Hot_en = true;  // > FixedRelations.Relations:72
    } else {  // > FixedRelations.Relations:73
      Hot_en = false;  // > FixedRelations.Relations:74
    }  // > FixedRelations.Relations:75
    /* Define condition for enable good face image */  // > FixedRelations.Relations:76
    if (Hot_en == true || Cold_en == true ){  // > FixedRelations.Relations:77
      Good_en = false;  // > FixedRelations.Relations:78
    } else {  // > FixedRelations.Relations:79
      Good_en = true;  // > FixedRelations.Relations:80
      Score = Score + Reward;  // > FixedRelations.Relations:81
    }  // > FixedRelations.Relations:82
    /* Define score line positions */  // > FixedRelations.Relations:83
    Player_pos = (Score_line_max - Score_line_min)*Score/Score_max + Score_line_min;  // > FixedRelations.Relations:84
    Robot_pos = (Score_line_max - Score_line_min)*Score_rob/Score_max + Score_line_min;  // > FixedRelations.Relations:85
    /* Define variables for temperature indicator zones */  // > FixedRelations.Relations:86
    Sizey_hot = (Ref_pos-Pos_max) - Sizey_good/2;  // > FixedRelations.Relations:87
    Posy_hot = Pos_max + Sizey_hot/2;  // > FixedRelations.Relations:88
    Sizey_cold = Pos_min - Ref_pos + Sizey_good/2;  // > FixedRelations.Relations:89
    Posy_cold = Pos_min - Sizey_cold/2;  // > FixedRelations.Relations:90
    /* Define variables for arrow size */  // > FixedRelations.Relations:91
    Sizey_arrow = ((Size_arrow_max - Size_arrow_min)/(I_max - I_min))*(I*(1-Cloud_op)-I_min) + Size_arrow_min;  // > FixedRelations.Relations:92
    if (Auto_Mode){  // > FixedRelations.Relations:93
        // > FixedRelations.Relations:94
    /* Compute error */  // > FixedRelations.Relations:95
    error = Ref-T;  // > FixedRelations.Relations:96
    Int_er = Int_er + error;  // > FixedRelations.Relations:97
    /* Control signal */  // > FixedRelations.Relations:98
    q = Kp*(error + Ki*Int_er) + q_ss;   // > FixedRelations.Relations:99
    /* Anti Winduo */  // > FixedRelations.Relations:100
    if (q > 10){  // > FixedRelations.Relations:101
      q = 10;  // > FixedRelations.Relations:102
      Int_er = Int_er - error;  // > FixedRelations.Relations:103
      }  // > FixedRelations.Relations:104
    if (q < 1){  // > FixedRelations.Relations:105
      q = 1;  // > FixedRelations.Relations:106
      Int_er = Int_er - error;  // > FixedRelations.Relations:107
      }   // > FixedRelations.Relations:108
    }  // > FixedRelations.Relations:109
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Model") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["T","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=T) __mustReinitialize = true;
        __state[__cIn++] = T;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        T = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var T = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = (1/rho*Cp*A)*(beta*I*factor - H*((T+Tin)/2-Ta)/L - 50*q*(T-Tin)*rho*Cp/(L*36000*3)); // Rate for ODE: Model:T
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var T = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        T = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = T;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_T(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SOLprendete_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.Pointer_player.linkProperty("X",  function() { return Player_pos; }, function(_v) { Player_pos = _v; } ); // HtmlView linking property 'X' for element 'Pointer_player'
          _view.Player_fig.linkProperty("X",  function() { return Player_pos; }, function(_v) { Player_pos = _v; } ); // HtmlView linking property 'X' for element 'Player_fig'
          _view.Pointer_robot.linkProperty("X",  function() { return Robot_pos; } ); // HtmlView linking property 'X' for element 'Pointer_robot'
          _view.Robot_fig.linkProperty("X",  function() { return Robot_pos; } ); // HtmlView linking property 'X' for element 'Robot_fig'
          _view.Finish_line.linkProperty("X",  function() { return Score_line_max+10; } ); // HtmlView linking property 'X' for element 'Finish_line'
          _view.Background.linkProperty("SizeX",  function() { return 1700*1.2; } ); // HtmlView linking property 'SizeX' for element 'Background'
          _view.Sol.linkProperty("X",  function() { return -800 + t*1600/60; } ); // HtmlView linking property 'X' for element 'Sol'
          _view.Sol.linkProperty("Y",  function() { return I; }, function(_v) { I = _v; } ); // HtmlView linking property 'Y' for element 'Sol'
          _view.Sol.linkProperty("SizeY",  function() { return 400*1.4; } ); // HtmlView linking property 'SizeY' for element 'Sol'
          _view.Nuben.linkProperty("SizeX",  function() { return 400*1.25; } ); // HtmlView linking property 'SizeX' for element 'Nuben'
          _view.Nuben.linkProperty("Attributes",  function() { return { "opacity": Cloud_op}; } ); // HtmlView linking property 'Attributes' for element 'Nuben'
          _view.Nuben.linkProperty("Visibility",  function() { return Cloud_en; }, function(_v) { Cloud_en = _v; } ); // HtmlView linking property 'Visibility' for element 'Nuben'
          _view.Nuben2.linkProperty("SizeX",  function() { return 400*1.25; } ); // HtmlView linking property 'SizeX' for element 'Nuben2'
          _view.Nuben2.linkProperty("Attributes",  function() { return { "opacity": Cloud_op }; } ); // HtmlView linking property 'Attributes' for element 'Nuben2'
          _view.Nuben2.linkProperty("Visibility",  function() { return Cloud_en; }, function(_v) { Cloud_en = _v; } ); // HtmlView linking property 'Visibility' for element 'Nuben2'
          _view.Nuben3.linkProperty("SizeX",  function() { return 400*1.25; } ); // HtmlView linking property 'SizeX' for element 'Nuben3'
          _view.Nuben3.linkProperty("Attributes",  function() { return { "opacity": Cloud_op }; } ); // HtmlView linking property 'Attributes' for element 'Nuben3'
          _view.Nuben3.linkProperty("Visibility",  function() { return Cloud_en; }, function(_v) { Cloud_en = _v; } ); // HtmlView linking property 'Visibility' for element 'Nuben3'
          _view.arrow.linkProperty("SizeX",  function() { return 120*1.2; } ); // HtmlView linking property 'SizeX' for element 'arrow'
          _view.arrow.linkProperty("SizeY",  function() { return 120*1.4; } ); // HtmlView linking property 'SizeY' for element 'arrow'
          _view.bath.linkProperty("SizeX",  function() { return 450*1.2; } ); // HtmlView linking property 'SizeX' for element 'bath'
          _view.redArrow.linkProperty("SizeX",  function() { return 120*3; } ); // HtmlView linking property 'SizeX' for element 'redArrow'
          _view.redArrow.linkProperty("SizeY",  function() { return 120*1.8; } ); // HtmlView linking property 'SizeY' for element 'redArrow'
          _view.pump.linkProperty("SizeX",  function() { return 150*0.8; } ); // HtmlView linking property 'SizeX' for element 'pump'
          _view.pump.linkProperty("SizeY",  function() { return 150*1.4; } ); // HtmlView linking property 'SizeY' for element 'pump'
          _view.CSP.linkProperty("SizeX",  function() { return 600*1.4; } ); // HtmlView linking property 'SizeX' for element 'CSP'
          _view.arrow_sun3.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun3'
          _view.arrow_sun3.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun3'
          _view.arrow_sun2.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun2'
          _view.arrow_sun2.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun2'
          _view.arrow_sun6.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun6'
          _view.arrow_sun6.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun6'
          _view.arrow_sun5.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun5'
          _view.arrow_sun5.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun5'
          _view.arrow_sun4.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun4'
          _view.arrow_sun4.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun4'
          _view.arrow_sun.linkProperty("SizeX",  function() { return Sizey_arrow*0.2; } ); // HtmlView linking property 'SizeX' for element 'arrow_sun'
          _view.arrow_sun.linkProperty("SizeY",  function() { return Sizey_arrow; } ); // HtmlView linking property 'SizeY' for element 'arrow_sun'
          _view.tube.linkProperty("SizeY",  function() { return 40+5*q; } ); // HtmlView linking property 'SizeY' for element 'tube'
          _view.temp_level.linkProperty("LevelColor",  function() { return Color; }, function(_v) { Color = _v; } ); // HtmlView linking property 'LevelColor' for element 'temp_level'
          _view.temp_level.linkProperty("Level",  function() { return L_indicator; }, function(_v) { L_indicator = _v; } ); // HtmlView linking property 'Level' for element 'temp_level'
          _view.ref.linkProperty("Y",  function() { return Ref_pos; }, function(_v) { Ref_pos = _v; } ); // HtmlView linking property 'Y' for element 'ref'
          _view.bulbo.linkProperty("FillColor",  function() { return Color; }, function(_v) { Color = _v; } ); // HtmlView linking property 'FillColor' for element 'bulbo'
          _view.Zone_hot.linkProperty("Y",  function() { return Posy_hot; } ); // HtmlView linking property 'Y' for element 'Zone_hot'
          _view.Zone_hot.linkProperty("SizeY",  function() { return Sizey_hot; }, function(_v) { Sizey_hot = _v; } ); // HtmlView linking property 'SizeY' for element 'Zone_hot'
          _view.Zone_cold.linkProperty("Y",  function() { return Posy_cold; } ); // HtmlView linking property 'Y' for element 'Zone_cold'
          _view.Zone_cold.linkProperty("SizeY",  function() { return Sizey_cold; } ); // HtmlView linking property 'SizeY' for element 'Zone_cold'
          _view.Zone_good.linkProperty("Y",  function() { return Ref_pos; }, function(_v) { Ref_pos = _v; } ); // HtmlView linking property 'Y' for element 'Zone_good'
          _view.Zone_good.linkProperty("SizeY",  function() { return Sizey_good; }, function(_v) { Sizey_good = _v; } ); // HtmlView linking property 'SizeY' for element 'Zone_good'
          _view.HotPepe.linkProperty("CSS",  function() { return {"transform": "scale(-0.15,0.15)", "position": "absolute", "bottom":"-50px", "right":"-130px"}; } ); // HtmlView linking property 'CSS' for element 'HotPepe'
          _view.HotPepe_img.linkProperty("Visibility",  function() { return Hot_en; }, function(_v) { Hot_en = _v; } ); // HtmlView linking property 'Visibility' for element 'HotPepe_img'
          _view.CryPepe.linkProperty("CSS",  function() { return {"transform": "scale(-0.15,0.18)", "position": "absolute", "bottom":"-43px", "right":"-130px"}; } ); // HtmlView linking property 'CSS' for element 'CryPepe'
          _view.Crypepe_img.linkProperty("Visibility",  function() { return Cold_en; }, function(_v) { Cold_en = _v; } ); // HtmlView linking property 'Visibility' for element 'Crypepe_img'
          _view.HappyPepe.linkProperty("CSS",  function() { return {"transform": "scale(-0.15,0.15)", "position": "absolute", "bottom":"-50px", "right":"-130px"}; } ); // HtmlView linking property 'CSS' for element 'HappyPepe'
          _view.HappyPepe_img.linkProperty("Visibility",  function() { return Good_en; }, function(_v) { Good_en = _v; } ); // HtmlView linking property 'Visibility' for element 'HappyPepe_img'
          _view.checkBox.linkProperty("Checked",  function() { return Auto_Mode; }, function(_v) { Auto_Mode = _v; } ); // HtmlView linking property 'Checked' for element 'checkBox'
          _view.checkBox.setAction("OnCheckOn", function(_data,_info) {
  steady();

}); // HtmlView setting action 'OnCheckOn' for element 'checkBox'
          _view.Slider.linkProperty("Value",  function() { return q; }, function(_v) { q = _v; } ); // HtmlView linking property 'Value' for element 'Slider'
          _view.Final_message.linkProperty("Visibility",  function() { return Final_txt_en; }, function(_v) { Final_txt_en = _v; } ); // HtmlView linking property 'Visibility' for element 'Final_message'
          _view.Test2.linkProperty("CSS",  function() { return { "border-color": "rgb(0,0,0)"}; } ); // HtmlView linking property 'CSS' for element 'Test2'
          _view.Test2.linkProperty("Text",  function() { return Final_txt; }, function(_v) { Final_txt = _v; } ); // HtmlView linking property 'Text' for element 'Test2'
          _view.Manual_bt.setAction("OffClick", _pause); // HtmlView setting action 'OffClick' for element 'Manual_bt'
          _view.Manual_bt.linkProperty("State",  function() { return _isPaused; } ); // HtmlView linking property 'State' for element 'Manual_bt'
          _view.Manual_bt.setAction("OnClick", _play); // HtmlView setting action 'OnClick' for element 'Manual_bt'
          _view.Reset_bt.setAction("OnPress", _reset); // HtmlView setting action 'OnPress' for element 'Reset_bt'
          _view.Save_bt.setAction("OnClick", updateFile); // HtmlView setting action 'OnClick' for element 'Save_bt'
          _view.Player_txt.linkProperty("Value",  function() { return Player_name; }, function(_v) { Player_name = _v; } ); // HtmlView linking property 'Value' for element 'Player_txt'
          _view.Correo_txt.linkProperty("Value",  function() { return Player_data; }, function(_v) { Player_data = _v; } ); // HtmlView linking property 'Value' for element 'Correo_txt'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function SOLprendete_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SOLprendete_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('SOLprendete','./SOLprendete_Intro_1.html');

  return _view;
} // end of main function

function SOLprendete_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"TopPanel", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'TopPanel'
      .setProperty("Height",100) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'TopPanel'
      .setProperty("Width",1200) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'TopPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"SOLprendete", _view.TopPanel) // EJsS HtmlView.HtmlView: declaration of element 'SOLprendete'
      .setProperty("Height",100) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'SOLprendete'
      .setProperty("Width",600) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'SOLprendete'
      .setProperty("Text","SOLpréndete") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'SOLprendete'
      .setProperty("Font","normal normal 40px \"Arial Black\", Gadget, sans-serif") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'SOLprendete'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"FinishLine", _view.TopPanel) // EJsS HtmlView.HtmlView: declaration of element 'FinishLine'
      .setProperty("Height",90) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'FinishLine'
      .setProperty("Width",600) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'FinishLine'
      .setProperty("MinimumX",-100) // EJsS HtmlView.HtmlView: setting property 'MinimumX' for element 'FinishLine'
      .setProperty("MinimumY",-100) // EJsS HtmlView.HtmlView: setting property 'MinimumY' for element 'FinishLine'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'FinishLine'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView: setting property 'LineWidth' for element 'FinishLine'
      .setProperty("MaximumY",100) // EJsS HtmlView.HtmlView: setting property 'MaximumY' for element 'FinishLine'
      .setProperty("MaximumX",100) // EJsS HtmlView.HtmlView: setting property 'MaximumX' for element 'FinishLine'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Line", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Line'
      .setProperty("FillColor","rgba(0,100,255,1.0)") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'Line'
      .setProperty("SizeX",180) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Line'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'Line'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Line'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Line'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Line'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Pointer_player", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Pointer_player'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Pointer_player'
      .setProperty("Rotate",1.47) // EJsS HtmlView.HtmlView: setting property 'Rotate' for element 'Pointer_player'
      .setProperty("LineColor","rgba(102,139,71,1.0)") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'Pointer_player'
      .setProperty("Y",-45) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Pointer_player'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Pointer_player'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView: setting property 'LineWidth' for element 'Pointer_player'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Player_fig", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Player_fig'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Player_fig'
      .setProperty("ImageUrl","./CSP_game/peepoblushspinner-pepe.gif") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Player_fig'
      .setProperty("Y",-70) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Player_fig'
      .setProperty("SizeY",70) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Player_fig'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Pointer_robot", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Pointer_robot'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Pointer_robot'
      .setProperty("Rotate",-1.65) // EJsS HtmlView.HtmlView: setting property 'Rotate' for element 'Pointer_robot'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'Pointer_robot'
      .setProperty("Y",45) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Pointer_robot'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Pointer_robot'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView: setting property 'LineWidth' for element 'Pointer_robot'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Robot_fig", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Robot_fig'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Robot_fig'
      .setProperty("ImageUrl","./CSP_game/robot.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Robot_fig'
      .setProperty("Y",60) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Robot_fig'
      .setProperty("SizeY",80) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Robot_fig'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Finish_line", _view.FinishLine) // EJsS HtmlView.HtmlView: declaration of element 'Finish_line'
      .setProperty("SizeX",25) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Finish_line'
      .setProperty("Y",40) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Finish_line'
      .setProperty("ImageUrl","./CSP_game/golf-flag.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Finish_line'
      .setProperty("SizeY",120) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Finish_line'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"MainPanel", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'MainPanel'
      .setProperty("Height",800) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'MainPanel'
      .setProperty("Width",1200) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'MainPanel'
      .setProperty("CSS",{ "position": "relative"}) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'MainPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"Design", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'Design'
      .setProperty("Height",800) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'Design'
      .setProperty("Width",1200) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'Design'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleY' for element 'Design'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleX' for element 'Design'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView: setting property 'Enabled' for element 'Design'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Background", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Background'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Background'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Background'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g41.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Background'
      .setProperty("SizeY",2000) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Background'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Sol", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Sol'
      .setProperty("SizeX",400) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Sol'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g56.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Sol'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Nuben", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Nuben'
      .setProperty("X",500) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Nuben'
      .setProperty("Y",600) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Nuben'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g58.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Nuben'
      .setProperty("SizeY",400) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Nuben'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Nuben2", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Nuben2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Nuben2'
      .setProperty("Y",600) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Nuben2'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g58.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Nuben2'
      .setProperty("SizeY",400) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Nuben2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Nuben3", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Nuben3'
      .setProperty("X",200) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Nuben3'
      .setProperty("Y",300) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Nuben3'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g58.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Nuben3'
      .setProperty("SizeY",400) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'Nuben3'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow'
      .setProperty("X",-690) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow'
      .setProperty("Y",-420) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g49.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"bath", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'bath'
      .setProperty("X",630) // EJsS HtmlView.HtmlView: setting property 'X' for element 'bath'
      .setProperty("Y",-700) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'bath'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g45.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'bath'
      .setProperty("SizeY",500) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'bath'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"redArrow", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'redArrow'
      .setProperty("X",250) // EJsS HtmlView.HtmlView: setting property 'X' for element 'redArrow'
      .setProperty("Y",-480) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'redArrow'
      .setProperty("ImageUrl","./CSP_game/path45.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'redArrow'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"pump", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'pump'
      .setProperty("X",-790) // EJsS HtmlView.HtmlView: setting property 'X' for element 'pump'
      .setProperty("Y",-600) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'pump'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g69.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'pump'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"CSP", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'CSP'
      .setProperty("X",-200) // EJsS HtmlView.HtmlView: setting property 'X' for element 'CSP'
      .setProperty("Y",-475) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'CSP'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g133.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'CSP'
      .setProperty("SizeY",700) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'CSP'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun3", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun3'
      .setProperty("Rotate",3.15) // EJsS HtmlView.HtmlView: setting property 'Rotate' for element 'arrow_sun3'
      .setProperty("X",-420) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun3'
      .setProperty("Y",-235) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun3'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun3'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun2", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun2'
      .setProperty("Rotate",3.15) // EJsS HtmlView.HtmlView: setting property 'Rotate' for element 'arrow_sun2'
      .setProperty("X",60) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun2'
      .setProperty("Y",-235) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun2'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun6", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun6'
      .setProperty("X",-420) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun6'
      .setProperty("Y",-555) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun6'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun6'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun5", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun5'
      .setProperty("X",60) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun5'
      .setProperty("Y",-555) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun5'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun5'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun4", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun4'
      .setProperty("X",-180) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun4'
      .setProperty("Y",-555) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun4'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun4'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"arrow_sun", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'arrow_sun'
      .setProperty("Rotate",3.15) // EJsS HtmlView.HtmlView: setting property 'Rotate' for element 'arrow_sun'
      .setProperty("X",-180) // EJsS HtmlView.HtmlView: setting property 'X' for element 'arrow_sun'
      .setProperty("Y",-235) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'arrow_sun'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g112.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'arrow_sun'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"tube", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'tube'
      .setProperty("SizeX",900) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'tube'
      .setProperty("X",-170) // EJsS HtmlView.HtmlView: setting property 'X' for element 'tube'
      .setProperty("Y",-390) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'tube'
      .setProperty("ImageUrl","./CSP_game/solprendete-CSP game_g135.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'tube'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"thermo", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'thermo'
      .setProperty("SizeX",350) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'thermo'
      .setProperty("X",600) // EJsS HtmlView.HtmlView: setting property 'X' for element 'thermo'
      .setProperty("Y",-200) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'thermo'
      .setProperty("ImageUrl","./CSP_game/thermometer.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'thermo'
      .setProperty("SizeY",500) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'thermo'
      ;

    _view._addElement(EJSS_DRAWING2D.tank,"temp_level", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'temp_level'
      .setProperty("SizeX",35) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'temp_level'
      .setProperty("X",600) // EJsS HtmlView.HtmlView: setting property 'X' for element 'temp_level'
      .setProperty("Y",-340) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'temp_level'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'temp_level'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Cautal_txt", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Cautal_txt'
      .setProperty("X",-200) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Cautal_txt'
      .setProperty("Y",20) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Cautal_txt'
      .setProperty("Text","Caudal") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'Cautal_txt'
      .setProperty("Font","normal normal 26px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Cautal_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ref", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'ref'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'ref'
      .setProperty("SizeX",50) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'ref'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'ref'
      .setProperty("X",565) // EJsS HtmlView.HtmlView: setting property 'X' for element 'ref'
      .setProperty("LineColor","rgba(64,255,64,0.0)") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'ref'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'ref'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView: setting property 'EnabledPosition' for element 'ref'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bulbo", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'bulbo'
      .setProperty("SizeX",85) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'bulbo'
      .setProperty("ShapeType","circle") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'bulbo'
      .setProperty("X",600) // EJsS HtmlView.HtmlView: setting property 'X' for element 'bulbo'
      .setProperty("LineColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'bulbo'
      .setProperty("Y",-365) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'bulbo'
      .setProperty("SizeY",120) // EJsS HtmlView.HtmlView: setting property 'SizeY' for element 'bulbo'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Zone_hot", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Zone_hot'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'Zone_hot'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Zone_hot'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'Zone_hot'
      .setProperty("X",670) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Zone_hot'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'Zone_hot'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Zone_cold", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Zone_cold'
      .setProperty("FillColor","rgba(0,50,255,1.0)") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'Zone_cold'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Zone_cold'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'Zone_cold'
      .setProperty("X",670) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Zone_cold'
      .setProperty("LineColor","rgba(0,50,255,1.0)") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'Zone_cold'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Zone_good", _view.Design) // EJsS HtmlView.HtmlView: declaration of element 'Zone_good'
      .setProperty("FillColor","rgba(0,205,0,1.0)") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'Zone_good'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'Zone_good'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'Zone_good'
      .setProperty("X",670) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Zone_good'
      .setProperty("LineColor","rgba(0,205,0,1.0)") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'Zone_good'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"HotPepe", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'HotPepe'
      .setProperty("Background","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'HotPepe'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleY' for element 'HotPepe'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleX' for element 'HotPepe'
      .setProperty("Foreground","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Foreground' for element 'HotPepe'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"HotPepe_img", _view.HotPepe) // EJsS HtmlView.HtmlView: declaration of element 'HotPepe_img'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'HotPepe_img'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'HotPepe_img'
      .setProperty("ImageUrl","./CSP_game/monka-w-pepe.gif") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'HotPepe_img'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"CryPepe", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'CryPepe'
      .setProperty("Background","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'CryPepe'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleY' for element 'CryPepe'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleX' for element 'CryPepe'
      .setProperty("Foreground","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Foreground' for element 'CryPepe'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"Crypepe_img", _view.CryPepe) // EJsS HtmlView.HtmlView: declaration of element 'Crypepe_img'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'Crypepe_img'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'Crypepe_img'
      .setProperty("ImageUrl","./CSP_game/cry-pepe.gif") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'Crypepe_img'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"HappyPepe", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'HappyPepe'
      .setProperty("Background","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'HappyPepe'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleY' for element 'HappyPepe'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView: setting property 'AutoScaleX' for element 'HappyPepe'
      .setProperty("Foreground","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView: setting property 'Foreground' for element 'HappyPepe'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"HappyPepe_img", _view.HappyPepe) // EJsS HtmlView.HtmlView: declaration of element 'HappyPepe_img'
      .setProperty("X",0) // EJsS HtmlView.HtmlView: setting property 'X' for element 'HappyPepe_img'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView: setting property 'Y' for element 'HappyPepe_img'
      .setProperty("ImageUrl","./CSP_game/happy-clap.gif") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'HappyPepe_img'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Auto_panel", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'Auto_panel'
      .setProperty("CSS",{ "cursor":"crosshair", "position":"absolute", "bottom":"-10px", "right":"450px"  }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'Auto_panel'
      .setProperty("Font","normal normal 40px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Auto_panel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"checkBox", _view.Auto_panel) // EJsS HtmlView.HtmlView: declaration of element 'checkBox'
      .setProperty("TextOn","Automático") // EJsS HtmlView.HtmlView: setting property 'TextOn' for element 'checkBox'
      .setProperty("TextOff","Automático") // EJsS HtmlView.HtmlView: setting property 'TextOff' for element 'checkBox'
      .setProperty("Text","checkBox") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'checkBox'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"PanelSlider", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'PanelSlider'
      .setProperty("CSS",{ "cursor":"crosshair", "position":"absolute", "bottom":"375px", "right":"650px"  }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'PanelSlider'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"Slider", _view.PanelSlider) // EJsS HtmlView.HtmlView: declaration of element 'Slider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView: setting property 'Minimum' for element 'Slider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView: setting property 'Maximum' for element 'Slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Final_message", _view.MainPanel) // EJsS HtmlView.HtmlView: declaration of element 'Final_message'
      .setProperty("CSS",{ "cursor":"crosshair", "position":"absolute", "bottom":"600px", "right":"205px", "border-style": "double" }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'Final_message'
      .setProperty("Font","normal normal 40px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Final_message'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Test2", _view.Final_message) // EJsS HtmlView.HtmlView: declaration of element 'Test2'
      .setProperty("Width",750) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'Test2'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'Test2'
      .setProperty("Font","normal bold 40px \"Times New Roman\", Times, serif") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Test2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"ButtonPanel", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'ButtonPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"Manual_bt", _view.ButtonPanel) // EJsS HtmlView.HtmlView: declaration of element 'Manual_bt'
      .setProperty("TextOn","Jugar") // EJsS HtmlView.HtmlView: setting property 'TextOn' for element 'Manual_bt'
      .setProperty("TextOff","Pause") // EJsS HtmlView.HtmlView: setting property 'TextOff' for element 'Manual_bt'
      .setProperty("Font","normal normal 40px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Manual_bt'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Reset_bt", _view.ButtonPanel) // EJsS HtmlView.HtmlView: declaration of element 'Reset_bt'
      .setProperty("Text","Reiniciar") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'Reset_bt'
      .setProperty("Font","normal normal 40px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Reset_bt'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Save_bt", _view.ButtonPanel) // EJsS HtmlView.HtmlView: declaration of element 'Save_bt'
      .setProperty("Text","Grabar") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'Save_bt'
      .setProperty("Font","normal normal 40px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Save_bt'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"test", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'test'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Name", _view.test) // EJsS HtmlView.HtmlView: declaration of element 'Name'
      .setProperty("Text","Nombre: ") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'Name'
      .setProperty("Font","normal normal 15px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'Name'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"Player_txt", _view.test) // EJsS HtmlView.HtmlView: declaration of element 'Player_txt'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView: setting property 'Editable' for element 'Player_txt'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Data", _view.test) // EJsS HtmlView.HtmlView: declaration of element 'Data'
      .setProperty("Text","Correo: ") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'Data'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"Correo_txt", _view.test) // EJsS HtmlView.HtmlView: declaration of element 'Correo_txt'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView: setting property 'Editable' for element 'Correo_txt'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      SOLprendete<br />
     <img alt="Logo" src="CSP_game/pepe_wink.png" />
      </p>
      <p>
 Juan Miguel; Igor Pataro
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">
        <p>&#169; 2024, Juan Miguel; Igor Pataro.</p>
        <p>Created with <a target="_blank" href="https://gitlab.com/ejsS/JavaScriptEditor/release">JavaScript Easy Java Simulations 6.02_BETA (Build 210903)</a></p>
        <p><a target="_blank" href="https://gitlab.com/ejsS/JavaScriptEditor/release"><img alt="EJS Logo here" src="_ejs_library/images/JavaScriptEJSLogo.png" /></a></p>
      </div>
      <div class="cc_right" style="float:right">Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"><img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /></a> license.
      </div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SOLprendete("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
